#! /bin/csh -f 
#
#  this script will generate new miriad_start.{csh,sh} files
#  either from scratch, or edit existing ones. The idea is that only 
#  this file should need an edit if MIRIAD has been relocated to another
#  root directory.
#
#  it will detect if it is 
#      MIR4, the Miriad V4 (both old and new install methods)
#      ATNF-MIRIAD, the RCS based binary weekly builds
#
#  See also install/miriad_bin.atnf
#
# TODO:   optional argument to select old or new for MIR4 
#         check if you run the 32bit on 64bit, which runs, but would not compile itself

if ($#argv == 0) then
  # try and discover, if the current directory looks like a miriad one
  if (-e MIR4 && -d borrow) then
    echo Testing for MIR4
    set m=`pwd`
    set ht=(`echo MIRRC.* | sed s/MIRRC.local// | sed s/MIRRC.//`)
    if ($#ht == 1) then
      echo Found MIR=$m hosttype=$ht
      set MIR=$m
      set hosttype=$ht
    else if (-e automiriad.csh) then
      echo Current directory looks like a new-style tree
      cp automiriad.csh miriad_start.csh
      cp automiriad.sh  miriad_start.sh
      exit 0
    else 
      echo Current directory does not look like a MIR4 root directory
      exit 1
    endif
  else if (-d specdoc) then
    echo Testing for ATNF miriad
    setenv MIR `pwd`
    sed -e "s,@MIRROOT@,$MIR," scripts/MIRRC.in > MIRRC
    sed -e "s,@MIRROOT@,$MIR," scripts/MIRRC.sh.in > MIRRC.sh
    chmod 644 MIRRC*
  endif
else if ($#argv == 2) then
  set MIR=$1
  set hosttype=$2
else
  echo Usage: $0 "[MIR hosttype]"
  echo "Needs to be inside the MIR root, or supply MIR and valid hosttype"
  exit 1
endif


echo make_miriad_starts: using MIR=$MIR

cd $MIR

set start1=miriad_start.csh
set start2=miriad_start.sh
if (-e MIRRC) then
  # ATNF style
  echo Found an ATNF style MIRIAD tree
  echo "# source this file to set MIR env"  > $start1
  echo "setenv MIR $MIR"                   >> $start1
  echo 'source $MIR/MIRRC'                 >> $start1
  echo "# this script was created by $0"   >> $start1

  echo "# source this file to set MIR env"  > $start2
  echo "export MIR=$MIR"                   >> $start2
  echo 'source $MIR/MIRRC.sh'              >> $start2
  echo "# this script was created by $0"   >> $start2
else
  # CARMA style
  echo Found a CARMA style MIRIAD tree
  echo "# source this file to set MIR env"  > $start1
  echo "setenv MIR $MIR"                   >> $start1
  echo 'source $MIR/MIRRC'."$hosttype"     >> $start1
  echo "# this script was created by $0"   >> $start1

  echo "# source this file to set MIR env"  > $start2
  echo "export MIR=$MIR"                   >> $start2
  echo 'source $MIR/MIRSRC'."$hosttype"    >> $start2
  echo "# this script was created by $0"   >> $start2
endif


# Sanity checks. Mostly for mac users, they love to install miriad
# on a fresh new mac and forget that a virgin mac is a useless doorstop
# Linux users also sometimes forget to install development support.

set sname=`uname -s`

if ($sname == Linux) then
  echo MIRIAD installed on a Linux system
  if (! -e /usr/bin/cvs) echo "Warning: cvs not present."
  if (! -e /usr/bin/make) echo "Warning: make not present."
  if (! -e /usr/bin/gfortran) echo "Warning: gfortran not present."
else if ($sname == Darwin) then
  echo MIRIAD installed on a mac. Hold your breath...
  # check if Xcode installed
  if (! -e /usr/bin/cvs) echo "Warning: cvs not present, did you not install Xcode?"
  if (! -e /usr/bin/make) echo "Warning: make not present, did you not install Xcode?"
  # check if HPC compiler installed
  if (! -e /usr/local/bin/gfortran) then
    echo Warning: did not find HPC compiler in /usr/local/bin/gfortran
  endif
  echo OK.
else
  echo Warning, MIRIAD installed on an unknown system $sname
endif
