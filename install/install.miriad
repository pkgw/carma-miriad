#! /bin/csh -f
#
set version=28-may-2012
#
#  2-aug-99 Updated for Sebok's Mandrake setup
#  1-aug-00 Updated to allow to build private PGPLOT version
# 11-aug-00 add kdoc files manually
# 28-aug-00 added xmrecvlist, fixed HTTPC bug for libwww
#  8-oct-00 added velplotc as special program, if libforms.so present
# 17-oct-00 allow compilation with -g
#  7-mar-01 optionally use CVS archive to bootstrap from
# 12-jun-01 pgplot522
# 14-jun-01 atlod
# 18-jun-01 allow option to install from with CVS source code tree
# 18-aug-01 protect if newdir exists? comments on lesstif/openmotif
# 12-sep-01 unified script so it also works for solaris, and the default
#           is now to use internal=1
# 23-sep-01 various fixes for darwin (Mac-OS X)
# 11-feb-02 optional new intel compiler for linux
# 04-oct-02 modified usage of tr - colby
#  3-dec-02 rpfits is now source included
# 23-jan-03 add (optional) install of LGM's rad/lvg package in borrow
# 21-feb-03 more logfiles, so less to the screen
# 17-apr-03 fix up MIRSRC from skel
# 23-oct-04 configure now controls maxdim.h and maxdimc.h
# 25-nov-04 fortran compiler choice
#  4-jan-05 MacOSX (10.3=panther)
# 11-jan-05 some temporary MacOSX related fixes, and cleanup
# 19-jun-05 g95 an option
# 26-aug-05 miriad_start.$SHELL scripts
# 16-oct-05 64bit fix for pgplot
# 27-nov-05 gfortran an option
#  9-jan-06 (JHZ) replaces 'borrow' with '../borrow' in lines 88-90
#           to fix installation of pgplot for 64bits linux
# 30-jan-06 fix typo for poor (ba)sh users
# 10-jan-06 (JHZ) change g77_gcc.conf to mirg77_gcc.conf when copy over
#           g77_gcc_64.conf (the pgplot config file for 64bits linux)
# 24-may-06 more configure options, optional compile.generic
#  7-feb-07 fixes for non-linux
#  5-mar-07 using new make_miriad_starts
# 17-may-07 use $CC, $F77 and $CXX in $MIRBIN, if present
# 16-jun-08 add zeno/hkmiriad
# 10-dec-08 pgplot64 fix
# 18-mar-09 force darwin no shared libs
#  9-jun-10 allow gif=0 to disable GIF drivers for older gfortran
#           also check for SELinux now
# 22-jun-10 brief=1 option to only install the core of miriad
#  4-jul-10 added carma specific tests
#  1-jun-11 minor change for new rpfits 2.23 install
# 10-jun-11 gfortran=1 generic=1 now the default, 
# 30-apr-12 ubuntu 12.04, enable more DEBUG with debug=1
#  1-may-12 debug=1 expanded to include -DDEBUG; brief=2
# 28-may-12 DSO linking option (a quick fix to a deeper problem)
#-----------------------------------------------------------------------

# sanity check: find out from the way it was called where the script lives
# since it needs to be run from the $MIR/install directory

set here=`dirname $0`
cd $here
 
if (! -e ../VERSION) then
  echo You currently need to execute this script from the miriad/install dir
  echo Since somehow i cannot find where it is....
  exit 1
endif

#  carma, wsrt, atnf, sma, bima, ....
#  there is no good support here for combined (e.g. MAX(carma,sma)) arrays
set telescope=carma

#  pgplot patch ; for older gfortran compilers  gif=0 is required
set gif=1

#  try the new generic (autoconf) created compile directives file?
set generic=1

#  brief (1:         2: no binaries)
set brief=0

#   'newdir' is something that tags the date this version was made (e.g. 98jun08)
#   later on this will also be stored again in the file $MIR/DATE, where the CVS miriad
#   version will be stored in $MIR/VERSION

set newdir=`date +%y%b%d | tr A-Z a-z`
set hosttype=`uname -s | tr A-Z a-z`

# test file for mac (could also be /Application/...)
set Xcode=/Developer/Applications/Xcode.app/Contents/version.plist

# hosttypes we support:  linux, darwin (MacOSX), sunos (->sun4sol)

#	patch to use Stupar's original names
if ($hosttype == sunos) set hosttype=sun4sol
#       patch for the new sun blade ?
if ($hosttype == SlnOS) set hosttype=sun4sol
#	and for those who have failed it all....
if ($hosttype == SunOS) set hosttype=sun4sol

#
echo MIRIAD installation $version, for $hosttype

#	try and be intelligent about X  (the mirdefs script may help here if you need to modify)
#       AMD64 may use /usr/X11R6/lib64 here !!!
set pgplot64 = 0
if ($hosttype == linux) then
  set mirxinc="/usr/include/X11"
  set arch=`uname -m`
  if ($arch == x86_64) set pgplot64=1
  # TODO: fix this, this is not always the right way to check for 64bit
  if (-e /usr/X11R6/lib64) then
    set mirxlib="/usr/X11R6/lib64"
    if (-e ../borrow/pgplot/sys_linux/g77_gcc_64.conf) then
      echo Patching your PGPLOT for 64bit
      cp ../borrow/pgplot/sys_linux/g77_gcc_64.conf ../borrow/pgplot/sys_linux/mirg77_gcc.conf
      set pgplot64 = 1
    endif
  else
    # ubuntu12 uses now /usr/lib/i386-linux-gnu/ but solves this via /etc/ld.so.conf
    # so this useless setting doesn't do any harm
    set mirxlib="/usr/X11R6/lib"
  endif
else if ($hosttype == sun4sol) then
	# sunos 5.6
  set mirxinc="/usr/include/X11"
  set mirxlib="/usr/X/lib"
else if ($hosttype == darwin) then
  if (-e $Xcode) then
    echo Your Xcode version:
    cat $Xcode
  else
    echo WARNING: no file Xcode=$Xcode 
  endif
  echo Output from the sw_vers command:
  sw_vers
  set mirxinc="/usr/X11R6/include/X11"
  set mirxlib="/usr/X11R6/lib"
else
  set mirxinc="/usr/include/X11"
  set mirxlib="/usr/X11R6/lib"
endif

if (! -e $mirxinc/Xos.h) then
  echo CANNOT FIND $mirxinc/Xos.h, you probably should install more OS support
endif

# /sw/lib is for Fink, /opt/local/lib for DarwinPorts (on MacOSX)  
# lib64's are for linux 64bit machines
set searchlibs=(/lib64 /lib /usr/lib64 /usr/lib /usr/X11R6/lib64 usr/X11R6/lib /local/lib /usr/local/lib /sw/lib /opt/local/lib)

set log=/tmp/miriad.install.$$.log

# 		MIRIAD V3:  (can be overriden with cvs=1, see below)
set tar=miriad.tar.gz
set ftp=ftp://ftp.astro.umd.edu/progs/bima

# 		find a reasonable root for miriad 
if ($?ASTROMAKE) then
  set mirroot=$ASTROMAKE/opt/miriad
else
  set mirroot=/usr/local/miriad
endif

#		remember from where this was installed
set install_root=`pwd`

#               turn on(1)/off(0) certain install options (command line)
set official=0              #  also modify the system (c)shrc.MIRIAD?
set shared=1                #  also build shared library libmir.so? [not working on mac yet]
set dsolink=0               #  modern DSO linking (e.g. ubuntu 12)
set pgplot=1                #  include PGPLOT in $MIRLIB ? (you almost ALWAYS want this to be 1)
set debug=0                 #  compile in debug (-g) mode ?   also enables -DDEBUG
set cvs=1                   #  use CVS archive to get miriad.tar.gz ?
set internal=1              #  internal sourcecode build; overrides cvs, mirroot and newdir
set xcorf=0                 #  xcorf is old now, for BIMA 
set test=1                  #  mir.test  baseline test (batch oriented)
set tests=1		    #  mir.tests sanity tests (batch oriented)
set testx=0		    #  mir.testx testing X routines (interactive)
set bench=0,512,1           #  mir.bench nchan,mapsize,cell  (nchan=0 will skip bench)

#     MUST pick one of these
set g77=0                   #  g77 compiler
set intel=0                 #  use intel compiler (ifc/icc) for linux?
set g95=0                   #  use g95 as default gnu compiler, instead of g77 [linux only]
set gfortran=1              #  use gfortran as default gnu compiler, instead of g77 [linux only]


set man=1		    #  do manual pages
set zeno=1                  #  add zeno and hkmiriad?
set nemo=0                  #  add nemo?
set lfs=(-D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE) # LFS flags for uvio
set subwrap=0               #  install python/subwrap


#		   	remember from where we were installing, since we have stuff here.....
set install_dir=`pwd`

#                       parse optional command line arguments of the form keyword=value
foreach a ($*)
  set $a
end

#       a few special overrides
if ($hosttype == darwin) set shared=0


echo Running configure, telescope=$telescope, logfile in configure.LOG:
./configure --with-telescope=$telescope >& configure.LOG
if ($status) then
  echo Problems running configure, check configure.LOG
  exit 1
else
  echo OK.
endif

#		care, wip still uses something else, it won't listen to $fortran
#		and you probably need 'f77' in your path
#               : rpfits already needs this
if ($intel) then
  set fortran=ifort
else if ($g95) then
  set fortran=g95
else if ($gfortran) then
  set fortran=gfortran
else
  set fortran=g77
endif

if ($internal) then
   # override newdir and mirroot if we do an internal build....
   # newdir is now just a tagname, not a subdirectory
   set newdir=CVS
   pushd .. >& /dev/null
   set mirroot=`pwd`
   popd >& /dev/null
   set cvs=0
   echo "Using internal build with mirroot=$mirroot"
else if ($cvs) then
   cd $mirroot
   echo "Working in $mirroot - extracting current CVS snapshot into $newdir"
   if ($?CVSROOT == 0) then
      setenv CVSROOT :pserver:guest@cvs.astro.umd.edu:/home/cvsroot
      echo "Use the password 'guest' for read-only CVS access"
      cvs login
   endif
   cvs export -D tomorrow -d $newdir miriad >>& $log
   echo "Extracting current CVS snapshot of wip into $newdir/borrow/wip" >>& $log
   (cd $newdir/borrow; cvs export -D tomorrow wip) >>& $log
else
   cd $mirroot
   echo "Working in $mirroot - getting a tarball"
   if (-e $tar) then
      echo "### Warning: $tar already present, using it"
   else
      echo "Picking up  $ftp/$tar"
      ncftpget $ftp/$tar
   endif

   if (-d $newdir) then
      echo "### Warning: $newdir already exists, using it"
      cd $newdir
   else
      echo "Untarring $tar"
      mkdir $newdir
      cd $newdir
      tar zxf ../$tar
   endif

endif

if ($internal) then
  setenv MIRTEMP $mirroot
else
  setenv MIRTEMP $mirroot/$newdir
endif
if ($debug == 1) setenv MIRDEBUG 1

set path = ( $MIRTEMP/src/sys/bin $path )
rehash
echo mir.mkdirs $MIRTEMP
mir.mkdirs $MIRTEMP >& /tmp/mir.mkdirs.$$.log

if ($?CC && $?F77 && $?CXX) then
  echo Using symlinks to your compiler in MIRBIN
  echo CC=$CC
  echo F77=$F77
  echo CXX=$CXX

endif

# not here.....
if (-d $MIRTEMP/bin/localsys) then
  cp $install_dir/compile.generic $MIRTEMP/bin/localsys
  if ($generic) then
    echo "Warning: try out new compile.generic"
    echo cp $install_dir/compile.generic $MIRTEMP/bin/localsys/compile.$hosttype
    cp $install_dir/compile.generic $MIRTEMP/bin/localsys/compile.$hosttype
  endif
endif

if ($pgplot64) then
  # this script can be safely run multiple times
  (cd $MIRTEMP/borrow/pgplot/drivers; ./fix64bit.csh)
endif

set startcsh=$MIRTEMP/MIRRC.$hosttype
set startsh=$MIRTEMP/MIRSRC.$hosttype

#    	Linux really ... should work for SunOS too...
cat $MIRTEMP/src/sys/files/MIRRC.skel |\
  sed s,/mir_rootdir,$MIRTEMP, |\
  sed s,mir_hosttype,$hosttype, |\
  sed s,/usr/openwin/include,$mirxinc, |\
  sed s,/usr/local/lib/X11,$mirxlib, |\
  sed s,MIRTEL:unknown,$telescope, |\
  grep -v PGPLOT_FONT                                         >! $startcsh

cat $MIRTEMP/src/sys/files/MIRSRC.skel |\
  sed s,/mir_rootdir,$MIRTEMP, |\
  sed s,mir_hosttype,$hosttype, |\
  sed s,/usr/openwin/include,$mirxinc, |\
  sed s,/usr/local/lib/X11,$mirxlib, |\
  sed s,MIRTEL:unknown,$telescope, |\
  grep -v PGPLOT_FONT                                         >! $startsh


echo '# special additions'                                    >> $startcsh
echo 'if ($?LD_LIBRARY_PATH) then'	                      >> $startcsh
echo '  setenv LD_LIBRARY_PATH ${MIRLIB}:${LD_LIBRARY_PATH}'  >> $startcsh
echo 'else'                                                   >> $startcsh
echo '  setenv LD_LIBRARY_PATH $MIRLIB'                       >> $startcsh
echo 'endif'                                                  >> $startcsh
echo "# pgplot=$pgplot"                                       >> $startcsh
if ($pgplot) then
  echo 'setenv PGPLOT_DIR $MIRLIB'                            >> $startcsh
else
  echo 'setenv PGPLOT_DIR /usr/lib/pgplot'                    >> $startcsh
endif
echo 'setenv WIPHELP $MIR/borrow/wip/wiphelp.dat'             >> $startcsh


echo '# special additions'                                    >> $startsh
echo 'if test -n "$LD_LIBRARY_PATH"; then'	              >> $startsh
echo '  export LD_LIBRARY_PATH=${MIRLIB}:${LD_LIBRARY_PATH}'  >> $startsh
echo 'else'                                                   >> $startsh
echo '  export LD_LIBRARY_PATH=$MIRLIB'                       >> $startsh
echo 'fi'                                                     >> $startsh
echo "# pgplot=$pgplot"                                       >> $startsh
if ($pgplot) then
  echo 'export PGPLOT_DIR=$MIRLIB'                            >> $startsh
else
  echo 'export PGPLOT_DIR=/usr/lib/pgplot'                    >> $startsh
endif
echo 'export WIPHELP=$MIR/borrow/wip/wiphelp.dat'             >> $startsh


# in preparation for single $MIR/bin and $MIR/lib directories
# we're going to instroduce the new miriad_start.$shell scripts:

./make_miriad_starts $MIRTEMP $hosttype

# astromake: only do this if you want to make THIS version miriad's 
# official one.
# you still need to patch the /usr/local/miriad/cshrc.MIRIAD
# for the system version !!
# also remove any old MIR from the environment, as it may confuse new MIRRC
unsetenv MIR
if ($official) then
  echo "source $MIRTEMP/MIRRC.$hosttype" > $mirroot/cshrc.MIRIAD
  echo ".     $MIRTEMP/MIRSRC.$hosttype" > $mirroot/shrc.MIRIAD
  source ~/cshrc.MIRIAD
endif

source $MIRTEMP/MIRRC.$hosttype


# kludge the fortran compiler, this is where configure would shine brighter
if ($hosttype == linux) then
 if ($intel) then
  echo "Using intel compiler for linux"
  cp $MIR/src/sys/bin/compile.linux_intel $MIR/bin/localsys/compile.linux
 else if ($g95) then
  echo "Using g95 compiler for linux"
  cp $MIR/src/sys/bin/compile.linux_g95   $MIR/bin/localsys/compile.linux
 else if ($gfortran) then
  echo "Using gfortran compiler for linux"
  cp $MIR/src/sys/bin/compile.linux_gfortran   $MIR/bin/localsys/compile.linux
 else
  echo "Using g77 compiler for linux"
  cp $MIR/src/sys/bin/compile.linux   $MIR/bin/localsys/compile.linux
 endif
else if ($hosttype == darwin && $gfortran) then
  echo "Using gfortran compiler for darwin"
  cp $MIR/src/sys/bin/compile.darwin_gfortran   $MIR/bin/localsys/compile.darwin
else
  if ($generic == 0) then
    echo "Using default compile.$hosttype"
    # actually don't have to copy, but this way easy to make modifications outside of CVS
    cp $MIR/src/sys/bin/compile.$hosttype $MIR/bin/localsys
  endif
endif

cd $MIR

#  some bug in CVS setup, needs to be fixed
echo Making the MIR tree writable
chmod -R +w $MIR

######  This should not be needed, standard version should be g77 for linux
#cp $MIR/src/sys/bin/compile.linux $MIR/bin/localsys
#echo Edit compile.linux and make g77 the default compiler
#vi $MIR/bin/localsys/compile.linux
 
echo Installing scripts....
mir.install scripts 

# if generic, patch
if (-d $MIRTEMP/bin/localsys) then
  cp $install_dir/compile.generic $MIRTEMP/bin/localsys
  if ($generic) then
    echo "Warning: try out new compile.generic"
    echo cp $install_dir/compile.generic $MIRTEMP/bin/localsys/compile.$hosttype
    cp $install_dir/compile.generic $MIRTEMP/bin/localsys/compile.$hosttype
  endif
endif


#  another bug in the cvs setup, should also be fixed -- is now fixed
echo Yuck, resetting xbit in MIRBIN
chmod +x $MIRBIN/*

#	what was this for again?
if ($hosttype == linux) then
  if (-e /usr/lib/libbsd-compat.a) echo Warning: you have /usr/lib/libbsd-compat.a
  if (! -e /usr/lib/libbsd.a) echo Warning: you do not have /usr/lib/libbsd.a
endif

# special: linux generally has readline...   (this test failed on mdk71 ??)
#          it may also work on other systems
set dorl=0
foreach ldir ($searchlibs)
  foreach ext (a so)    
    if (-e $ldir/libreadline.$ext) then
        echo Borrowing the system version of libreadline.$ext for $hosttype from $ldir
        cp -p $ldir/libreadline.$ext $MIRLIB
        if (-e /usr/bin/ranlib && $ext == a) ranlib $MIRLIB/libreadline.$ext
        set dorl=1
        break
    endif
  end
  if ($dorl) break
end
if ($dorl == 0) then
   echo Your system does not seem to have readline, and miriad.c will not use it
endif

if ($pgplot) then
  mir.install pgplot
  if ($gif == 0) then
    echo Patching PGPLOT, removing GIF drivers.
    set d=$MIRLIB/drivers.list
    mv $d $d.bad
    cat   $d.bad | grep -v GIDRIV | grep -v PPDRIV | grep -v WDDRIV > $d
    mir.install pgplot
  endif
  if ($hosttype == darwin) rm -f $MIRLIB/libpgplot.so
endif

echo LIB: linpack wcslib subs 
mir.install linpack wcslib subs 


#
if ($shared) then
  pushd $MIRLIB
  if (-e /usr/bin/ranlib) ranlib libmir.a

  if ($hosttype == linux) then
    ld -shared -o libmir.so --whole-archive libmir.a
      if (-e libpgplot.a && ! -e libpgplot.so) then
        ld -shared -o libpgplot.so --whole-archive libpgplot.a
    endif
  else if ($hosttype == darwin) then
    if (-e libmir.a) then
      mkdir tmp
      cd tmp
      ar xv ../libmir.a >& /dev/null
      gcc  -bundle -flat_namespace -undefined suppress -o ../libmir.so *.o
      cd ..
      rm -rf tmp
    endif
  else
    echo No shared support for $hosttype yet
  endif
  popd
endif

echo PGM: prog wip rad 
if ($brief < 2) then
  mir.install prog wip rad 
else
  echo SKIPPING prog wip rad, since brief=$brief
endif

# special things....

echo Compiling a static UVIO:
cc -O $lfs -DTESTBED -I$MIRINC $MIRSUBS/uvio.c -o $MIRBIN/uvio $MIRLIB/libmir.a -lm >& $MIR/tmp/uvio.$$.$hosttype

# xcorf: (open)motif or lesstiff needs to have been installed for this
# aug 2001: newer versions of lesstiff use /usr/X11R6/LessTif/Motif1.2/include
#           instead of /usr/X11R6/include (which is now used by openmotif !!!)
# Note: this tool is useful for BIMA only, for CARMA there is an online
#       java version on http://cedarflat.mmarray.org/observing/tools/CGS.html
#
set inc_motif=(/usr/X11R6/include /usr/X11R6/LessTif/Motif1.2/include /usr/X11R6/LessTif/Motif2.0/include)
set lib_motif=(/usr/X11R6/lib     /usr/X11R6/LessTif/Motif1.2/lib     /usr/X11R6/LessTif/Motif2.0/lib)
#   index into above array (1,2,..)
set imotif=1

if ($xcorf) then
  echo Compiling XCORF:
  cd $MIR/src/spec/xcorf
  make sol6 SOLARISLIBS= \
          CFLAGS="-O -I$inc_motif[$imotif]" \
	  RFLAGS6= \
	  LFLAGS6=-L$lib_motif[$imotif] >& $MIR/tmp/xcorf.$$.$hosttype
  mv xcorf $MIRBIN
  make cleanup
endif

# add keyword documentation to MIRPDOC
cd $MIRPDOC
rehash
doc -p $MIRCAT/keywords.kdoc

cd $MIR

if (-e $install_root/do_patch) then
    pushd $install_root >& /dev/null
    echo LOCAL install patches for $newdir
    echo $newdir > $MIR/DATE
    ./do_patch
    source $MIR/MIRRC.local
    # mkdir -p $MIR/local/install
	#  oops, what about the directories.....
    # cp -pr * $MIR/local/install
    popd >& /dev/null
endif

# velplotc: - make it depend on if Xforms is present - only works on linux
#       check http://world.std.com/~xforms/
#             http://savannah.nongnu.org/files/?group=xforms
# fedora-11:  xforms-devel.i586                  1.0.90-12.fc11
#             but note only .so files, no .a file, which messes up 
#             the code below.
set dofl=0
foreach ldir ($searchlibs)
    if (-e $ldir/libforms.a) then
        echo Borrowing the system version of libforms linux from $ldir
        cp -p $ldir/libforms.a $MIRLIB
	# this doesn't solve the forms.h file problem for recompilation
        set dofl=1
        break
    endif
end
if ($dofl) then
   echo Compiling velplotc with local libforms
   pushd $MIR/src/spec/velplotc >& /dev/null
   # TODO: makefile's should know about miriad's universe and inherit
   #       compile flags, names of compilers etc.
   make clean velplotc LIBFORMS=$MIRLIB/libforms.a FC=$fortran >& $MIR//tmp/velplotc.$$.$hosttype
   if ($status) echo Warning: problems compiling velplotc
   mv velplotc $MIRBIN
   make clean >>& $MIR//tmp/velplotc.$$.$hosttype
   popd >& /dev/null
else
   echo Could not find libforms.a to compile velplotc, trying system libforms.so
   pushd $MIR/src/spec/velplotc >& /dev/null
   # TODO: makefile's should know about miriad's universe and inherit
   #       compile flags, names of compilers etc.
   make clean velplotc FC=$fortran >& $MIR//tmp/velplotc.$$.$hosttype
   if ($status) echo Warning: problems compiling velplotc
   mv velplotc $MIRBIN
   make clean >>& $MIR//tmp/velplotc.$$.$hosttype
   popd >& /dev/null
endif

# ATNF stuff, linux only for now; always in debugging mode
if ($brief == 0) then

 echo Compiling rpfits for $hosttype

 pushd $MIR/borrow/rpfits >& /dev/null
 if ($hosttype == darwin) then
    if (! -e code/darwin) then
      (cd code; ln -s linux darwin)
    endif
 endif

 make RPARCH=$hosttype RANLIB=ranlib FC=$fortran FFLAGS=-g CFLAGS=-g >& $MIR/tmp/rpfits.$$.$hosttype 
 if ($status) echo Problems compiling RPFITS library
 mv librpfits.a $MIRLIB
 make clean
 popd >& /dev/null

 if (1) then
   mir.prog atlod   
 else
   # older method, makefile not great anymore
   echo Compiling atnf code: atlod
   pushd $MIR/tmp >& /dev/null
   cp -p $MIR/src/prog/atnf/atlod.* .
   make -f $MIRLIB/Makefile atlod EL=-lrpfits >& $MIR/tmp/atlod.$$.$hosttype 
   if ($status) echo Problems compiling ATLOD
   mv atlod $MIRBIN
   doc -p atlod.for
   mv atlod.doc $MIRPDOC
   rm -f atlod.*
   popd >& /dev/null
 endif

endif

if ($subwrap) then
 pushd $MIR/src/scripts/subwrap >& /dev/null
 ./build_python.sh $MIR $MIRHOST
 popd >& /dev/null
endif


pushd $install_root >& /dev/null

if (-e checklist) then
  echo Checking binaries:
  set numbins=`ls $MIRBIN|wc -l`
  echo Found $numbins entries in MIRBIN
  set bad=0
  set badlist=$MIR/tmp/checklist.$$.bad
  set all=`wc -l checklist | awk '{print $1}'`
  foreach b (`cat checklist`)
    if (! -e $MIRBIN/$b) then
      @ bad++
      echo $b >> $badlist
    endif
  end
  if ($bad > 0) then
    if ($bad > 10) then
	echo Found $bad / $all binaries missing, check $badlist 
        if ($bad > 100) then
	  echo Most likely you have a compiler issue and/or linking
	  echo Try sourcing the miriad_start.csh file
	  echo then use the mirboss command and recompile a program, e.g.
	  echo mir.prog itemize
	  echo to see what linking errors you have.
	endif
    else
	echo Found $bad / $all binaries missing:
	cat $badlist
        echo The ones you should not worry about are:  atlod, xcorf and velplotc.
    endif
  else
    echo "Wow, they all compiled"
  endif
endif

if ($zeno && -e $MIR/borrow/zeno && $brief == 0) then
  echo Adding zeno and hkmiriad
  (cd $MIR/borrow/zeno;                                    make install_miriad)  >& hkmiriad.log
  (cd $MIR/src/spec/hkmiriad/;  cp Makefile.hk  Makefile ; make install_miriad) >>& hkmiriad.log
  if ($status) echo Warning: hkmiriad.log seems to indicate some compile issues with hkmiriad
endif

if ($nemo) then
  echo Adding nemo
  (cd $MIR/borrow; cvs -Q co nemo; mir.install nemo) >& nemo.log
endif

if ($test) then
    ./mir.test
endif

if ($testx) then
   ./mir.testx
endif

if ($tests) then
   ./mir.tests gif=$gif
endif

if ($telescope == carma) then
   ./mir.carma
   ./mir.fringe
   ./mir.fringe mosaic=1
   ./mir.flux
endif

set benchpars=(`echo $bench | awk -F, '{print $1,$2,$3}'`)
if ($#benchpars == 3 && $benchpars[1] > 1) then
   mir.bench nchan=$benchpars[1] mapsize=$benchpars[2] cell=$benchpars[3]
endif

if (-d /etc/selinux) then
   echo Checking to enable MIRIAD shared libraries for SELinux
   selinuxenabled
   if ($status == 0) chcon -t texrel_shlib_t $MIR/lib/linux/*.so
endif

# copy some interesting files to tmp
cp /etc/*release /etc/shells  $MIR/tmp



#   Now tag it, so we can 'find -newer' things that have been updated since creation!
echo MIRIAD Installation done on `hostname` by `whoami` on `date` with `uname -a` > $MIRLIB/Installed.tag
exit 0



